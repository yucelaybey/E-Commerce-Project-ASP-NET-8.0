@using System.Globalization
@model Tuple<List<BestSellerProductDto>, UserInfoDto>

@{
    var bestProduct = Model.Item1;
    var userInfo = Model.Item2;
}

@if (Model != null && bestProduct.Count != 0)
{
    <div class="products-grid">
        @foreach (var item in bestProduct)
        {
            <div class="product-card">
                <a href="/Anasayfa/Kategoriler/@FormatForUrl(item.CategoryName)/@FormatForUrl(item.Name)?productId=@item.ProductID" style="text-decoration: none">
                    <div class="fast-delivery">
                        <i class="fas fa-shipping-fast"></i> Hızlı Teslimat
                    </div>
                    <div class="product-category">
                        <span>@item.CategoryName</span>
                    </div>
                    @if (item.Favorites == true && item.Favorites != null && userInfo != null)
                    {
                        <button class="slider-favorite-btn" data-favoritesCardItemID="@item.FavoritesCardItemID" data-favoritesCardID="@item.FavoritesCardID" data-productID="@item.ProductID">
                            <i class="fas fa-heart"></i>
                        </button>
                    }
                    else if (item.Favorites == false && item.Favorites != null && userInfo != null)
                    {
                        <button class="slider-favorite-btn" data-favoritesCardItemID="@item.FavoritesCardItemID" data-favoritesCardID="@item.FavoritesCardID" data-productID="@item.ProductID">
                            <i class="far fa-heart"></i>
                        </button>
                    }
                    else
                    {
                        <a href="#" class="slider-favorite-btn show-modal-trigger" style="text-decoration:none">
                            <i class="far fa-heart"></i>
                        </a>
                    }
                    <img src="@item.ImageUrl" alt="@item.Name">
                    <div class="product-details">
                        <h3>@item.Name</h3>
                        <p>@item.Description</p>
                        <div class="product-stats">
                            <span class="cart-count-effect">@item.TotalQuantity.ToString("N0") Adet Satıldı</span>
                        </div>
                        <div class="product-price">
                            @if (item.SaleSeason && item.SalePrice.HasValue)
                            {
                                <del>₺@string.Format(CultureInfo.GetCultureInfo("tr-TR"), "{0:N2}", item.Price)</del>
                                <span style="color:limegreen">₺@string.Format(CultureInfo.GetCultureInfo("tr-TR"), "{0:N2}", item.SalePrice)</span>
                            }
                            else
                            {
                                <span>₺@string.Format(CultureInfo.GetCultureInfo("tr-TR"), "{0:N2}", item.Price)</span>
                            }
                        </div>



                        @if (userInfo != null && userInfo.Roles.Count != 0 && userInfo.Roles != null)
                        {
                            <button class="add-to-cart-btn-trend" data-product-id="@item.ProductID" data-quantity-id="1">
                                <i class="fas fa-cart-plus"></i> Sepete Ekle
                            </button>
                        }
                        else
                        {
                            <a href="#" class="add-to-cart-btn-trend show-modal-trigger" style="text-decoration:none">
                                <i class="fas fa-cart-plus"></i> Sepete Ekle
                            </a>
                        }
                    </div>
                </a>
            </div>
        }
    </div>
}
else
{
    <div style="display: flex; justify-content: center; align-items: center; height: 5vh;">
        <b style="color: red;">Öne Çıkan bulunmamaktadır</b>
    </div>
}
@functions {
    public string FormatForUrl(string text)
    {
        if (string.IsNullOrEmpty(text))
            return string.Empty;

        // Türkçe büyük harfleri önce küçült
        text = text.ToLower(System.Globalization.CultureInfo.GetCultureInfo("tr-TR"));

        // Tüm Türkçe karakterleri İngilizce karşılıklarıyla değiştir
        var turkishChars = "ığüşöç";
        var englishChars = "igusoc";

        for (int i = 0; i < turkishChars.Length; i++)
        {
            text = text.Replace(turkishChars[i], englishChars[i]);
        }

        // Özel karakterleri temizle ve boşlukları tireye çevir
        text = System.Text.RegularExpressions.Regex.Replace(text, @"[^a-z0-9\s-]", "");
        text = text.Replace(" ", "-");

        // Ardışık tireleri temizle
        text = System.Text.RegularExpressions.Regex.Replace(text, @"-+", "-");
        return text.Trim('-');
    }
}