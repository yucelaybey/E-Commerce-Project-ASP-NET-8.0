@model UpdateAppUserPasswordDto
@{
    Layout = null;
}
    
<!DOCTYPE html>
<html lang="tr">
@await Component.InvokeAsync("_HeadNewPasswordComponentPartial")
<body>
    <!-- Loading Ekranı -->
    @await Component.InvokeAsync("_LoadingNewPasswordComponentPartial")

    <!-- Doğrulama Başarılı Bildirimi -->
    @await Component.InvokeAsync("_NotificationNewPasswordComponentPartial")

    <!-- Ana Sayfaya Dön Butonu -->
    <a href="/Anasayfa" class="back-to-home">
        <i class="fas fa-arrow-left"></i> Ana Sayfaya Dön
    </a>

    <!-- Ana İçerik -->
    <div class="content" id="content">
        <div class="auth-container">
            <h2><i class="fas fa-key"></i> Yeni Şifre Oluştur</h2>
            <form method="post" asp-action="NewPassword">
            <div class="input-group">
                <input type="password" id="newPassword" placeholder="Yeni Şifre" asp-for="Password">
                <button class="toggle-password" type="button">
                    <i class="fas fa-lock"></i>
                </button>
            </div>

            <div class="input-group">
                <input type="password" id="confirmPassword" placeholder="Şifreyi Tekrar Girin" asp-for="ConfirmPassword">
                <button class="toggle-password" type="button">
                    <i class="fas fa-lock"></i>
                </button>
            </div>

            <!-- Şifre Kuralları -->
            <div class="password-rules" id="passwordRules">
                <div class="password-rule">
                    <i class="fas fa-check-circle rule-valid" id="lengthIcon"></i>
                    <span>Minimum 8 karakter</span>
                </div>
                <div class="password-rule">
                    <i class="fas fa-check-circle rule-valid" id="upperIcon"></i>
                    <span>En az 1 büyük harf</span>
                </div>
                <div class="password-rule">
                    <i class="fas fa-check-circle rule-valid" id="lowerIcon"></i>
                    <span>En az 1 küçük harf</span>
                </div>
                <div class="password-rule">
                    <i class="fas fa-check-circle rule-valid" id="numberIcon"></i>
                    <span>En az 1 rakam</span>
                </div>
                <div class="password-rule">
                    <i class="fas fa-check-circle rule-valid" id="specialIcon"></i>
                    <span>En az 1 özel karakter (*, +, .)</span>
                </div>
                <div class="password-rule">
                    <i class="fas fa-check-circle rule-valid" id="matchIcon"></i>
                    <span>Şifreler eşleşiyor</span>
                </div>
            </div>

            <button id="submitBtn" class="submit-button" disabled>
                <i class="fas fa-save"></i> Yeni Şifreyi Kaydet
            </button>
            </form>
        </div>
    </div>

    <script>
        // Sayfa yüklendiğinde
        document.addEventListener('DOMContentLoaded', function() {
          const loadingScreen = document.getElementById('loadingScreen');
          const content = document.getElementById('content');
          const successNotification = document.getElementById('successNotification');
          const passwordRules = document.getElementById('passwordRules');
          const newPassword = document.getElementById('newPassword');
          const confirmPassword = document.getElementById('confirmPassword');
          const submitBtn = document.getElementById('submitBtn');
          const toggleButtons = document.querySelectorAll('.toggle-password');

          // Loading ekranını 3 saniye göster ve sonra ana içeriği aç
          setTimeout(() => {
            loadingScreen.style.display = 'none';

            // Başarı bildirimini göster
            successNotification.style.opacity = '1';
            successNotification.style.transform = 'translateX(-50%) translateY(0)';

            // 2 saniye sonra bildirimi kapat ve içeriği göster
            setTimeout(() => {
              successNotification.style.opacity = '0';
              successNotification.style.transform = 'translateX(-50%) translateY(-100%)';
              content.style.display = 'block';
            }, 2000);
          }, 3000);

          // Şifre göster/gizle butonları
          toggleButtons.forEach(button => {
            button.addEventListener('click', function() {
              const input = this.parentElement.querySelector('input');
              const icon = this.querySelector('i');

              if (input.type === 'password') {
                input.type = 'text';
                icon.className = 'fas fa-unlock';
              } else {
                input.type = 'password';
                icon.className = 'fas fa-lock';
              }
            });
          });

          // Şifre kontrol fonksiyonları
          function checkPassword() {
            const password = newPassword.value;
            const confirm = confirmPassword.value;

            // Şifre kurallarını göster/gizle
            if (password.length > 0) {
              passwordRules.style.display = 'block';
            } else {
              passwordRules.style.display = 'none';
            }

            // Kuralları kontrol et
            const hasMinLength = password.length >= 8;
            const hasUpperCase = /[A-Z]/.test(password);
            const hasLowerCase = /[a-z]/.test(password);
            const hasNumber = /[0-9]/.test(password);
            const hasSpecialChar = /[*+.]/.test(password);
            const passwordsMatch = password === confirm && password.length > 0;

            // İkonları güncelle
            document.getElementById('lengthIcon').className = hasMinLength ?
              'fas fa-check-circle rule-valid' : 'fas fa-times-circle rule-invalid';
            document.getElementById('upperIcon').className = hasUpperCase ?
              'fas fa-check-circle rule-valid' : 'fas fa-times-circle rule-invalid';
            document.getElementById('lowerIcon').className = hasLowerCase ?
              'fas fa-check-circle rule-valid' : 'fas fa-times-circle rule-invalid';
            document.getElementById('numberIcon').className = hasNumber ?
              'fas fa-check-circle rule-valid' : 'fas fa-times-circle rule-invalid';
            document.getElementById('specialIcon').className = hasSpecialChar ?
              'fas fa-check-circle rule-valid' : 'fas fa-times-circle rule-invalid';
            document.getElementById('matchIcon').className = passwordsMatch ?
              'fas fa-check-circle rule-valid' : 'fas fa-times-circle rule-invalid';

            // Butonu aktif/pasif yap
            submitBtn.disabled = !(hasMinLength && hasUpperCase && hasLowerCase &&
                                  hasNumber && hasSpecialChar && passwordsMatch);
          }

          // Input değişikliklerini dinle
          newPassword.addEventListener('input', checkPassword);
          confirmPassword.addEventListener('input', checkPassword);

          // Form gönderimi
          submitBtn.addEventListener('click', function() {
            // Burada şifre değiştirme işlemi yapılacak
            // Örnek: fetch API ile sunucuya gönderim
          });
        });
    </script>
</body>
</html>
